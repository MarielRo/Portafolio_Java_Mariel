--Mariel Daniela Rojas Sánchez
--208030487
--Septiembre 2023

-- Creación de la base de datos
CREATE DATABASE VETERINARIA
GO

USE VETERINARIA
GO

--DROP DATABASE  VETERINARIA

--------------------------------------------------------------------------------------------------------------------
-- CRREACION DE LAS TABLAS 

CREATE TABLE CLIENTE(
	ID_CLIENTE INT PRIMARY KEY IDENTITY(1,1),
	NOMBRE VARCHAR(80) NOT NULL,
	APELLIDO VARCHAR(80) NOT NULL,
	TELEFONO VARCHAR(11) NULL,
	EMAIL  VARCHAR(45) NOT NULL,
)
GO
-- tabla trabajadoress
CREATE TABLE TRABAJADOR(
	ID_TRABAJADOR INT PRIMARY KEY IDENTITY(1,1),
	NOMBRE VARCHAR(80) NOT NULL,
	APELLIDO VARCHAR(80) NOT NULL,
	TELEFONO VARCHAR(11) NULL,
	EMAIL  VARCHAR(45) NOT NULL,
	PUESTO_TRABAJO VARCHAR(35) CONSTRAINT CHK_PUESTO CHECK(PUESTO_TRABAJO IN ('Vendedor','Veterinaria','Veterinario','Vendedora'))  NOT NULL
)
GO

-- tabla Productos/servicios
CREATE TABLE PRODUCTO(
    ID_PRODUCTO INT IDENTITY(1,1) PRIMARY KEY,
    NOMBRE VARCHAR(100) NOT NULL, -- poder agregar servicios en nombre
    PRECIO DECIMAL(10, 2) NOT NULL,
    CANTIDAD_DISPONIBLE INT CHECK(CANTIDAD_DISPONIBLE>=0),  -- como puede ser un servicio, no necesariamente tiene que haber cantidad,no puede ser menor a cero
	--FECHA_VENCIMIENTO DATE DEFAULT NULL,
	--LOTE VARCHAR(15),
	CATEGORIA VARCHAR(25) CONSTRAINT CHK_CATEGORIA CHECK(CATEGORIA IN ('Alimento','Juguetes','Medicamentos','Servicios'))
);
GO

--  Facturas compra
CREATE TABLE FACTURA_COMPRA (
    ID_FACTURA_COMPRA INT IDENTITY(1,1) PRIMARY KEY,
	TOTAL DECIMAL(10, 2) CHECK (TOTAL >= 0) NOT NULL,
    FECHA DATE DEFAULT GETDATE(),
	ESTADO VARCHAR(10) CONSTRAINT CHK_ESTADO1
        CHECK(ESTADO IN ('Cancelada', 'Pendiente', 'Anulada')) DEFAULT 'Cancelada',
	PROVEEDOR VARCHAR(65) NOT NULL
);
GO

--DetalleFactura compra
CREATE TABLE DETALLE_FACTURA_COMPRA (
    ID_DETALLE_COMPRA INT IDENTITY(1,1) PRIMARY KEY,
	ID_FACTURA_COMPRA INT FOREIGN KEY REFERENCES FACTURA_COMPRA(ID_FACTURA_COMPRA),
	ID_PRODUCTO INT FOREIGN KEY REFERENCES PRODUCTO(ID_PRODUCTO),
    CANTIDAD INT CHECK (CANTIDAD >= 0) NOT NULL,
	PRECIO_COMPRA DECIMAL(10, 2)CHECK (PRECIO_COMPRA >= 0) NOT NULL,
);
GO

--  Facturas venta
CREATE TABLE FACTURA_VENTA (
    ID_FACTURA_VENTA INT IDENTITY(1,1) PRIMARY KEY,
    ID_CLIENTE INT NOT NULL FOREIGN KEY REFERENCES CLIENTE(ID_CLIENTE), -- llave foranea
	ID_TRABAJADOR INT NOT NULL FOREIGN KEY REFERENCES TRABAJADOR(ID_TRABAJADOR),
	TOTAL DECIMAL(10, 2) CHECK (TOTAL >= 0) NOT NULL,
    FECHA DATE NOT NULL DEFAULT GETDATE(),
	ESTADO VARCHAR(10)CONSTRAINT CHK_ESTADO2
        CHECK(ESTADO IN ('Cancelada', 'Pendiente', 'Anulada')) DEFAULT 'Cancelada',
	METODO_PAGO VARCHAR(10) CONSTRAINT CHK_METODOPAGO
        CHECK(METODO_PAGO IN ('Sinpe', 'Efectivo', 'Tarjeta')) DEFAULT 'Efectivo'
);
GO

--DetalleFactura venta
CREATE TABLE DETALLE_FACTURA_VENTA (
    ID_DETALLE_VENTA INT IDENTITY(1,1) PRIMARY KEY,
	ID_FACTURA_VENTA INT FOREIGN KEY REFERENCES FACTURA_VENTA(ID_FACTURA_VENTA), -- llave foranea
	ID_PRODUCTO INT FOREIGN KEY REFERENCES PRODUCTO(ID_PRODUCTO), -- llave foranea
    CANTIDAD INT NOT NULL,
    PRECIO_VENTA DECIMAL(10, 2) NOT NULL,
);
GO
-- Crear la tabla de Mascotas
CREATE TABLE MASCOTA (
    ID_MASCOTA INT IDENTITY(1,1) PRIMARY KEY,
    NOMBRE VARCHAR(100),
    ESPECIE VARCHAR(50),
    RAZA VARCHAR(50),
    FECHA_NACIMIENTO DATE,
    ID_CLIENTE INT NOT NULL FOREIGN KEY REFERENCES CLIENTE(ID_CLIENTE) -- llave foranea
);
GO

-- Historial Medicos
CREATE TABLE HISTORIAL_MEDICO (
	ID_HISTORIAL INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    ID_MASCOTA INT NOT NULL FOREIGN KEY REFERENCES MASCOTA(ID_MASCOTA),
    ID_TRABAJADOR INT NOT NULL FOREIGN KEY REFERENCES TRABAJADOR(ID_TRABAJADOR),
    DESCRIPCION VARCHAR(200) NOT NULL,
    FECHA DATE NOT NULL
);
GO


--------------------------------------------------------------------------------------------------------------------
-- INSERTAR DATOS EN LAS TABLAS 

-- tabla clientes
INSERT INTO CLIENTE(NOMBRE,APELLIDO,TELEFONO,EMAIL) 
			VALUES('Mariel','Rojas','83912061','marielrojas50@gmail.com'),
				  ('Veronica','Blanco','60227090','vero.bro14@gmail.com'),
				  ('Mauren','Sánchez','688360383','sanc64@gmail.com'),
				  ('Estefany','Rojas','85684516','tefyro@gmail.com');
								

INSERT INTO TRABAJADOR(NOMBRE,APELLIDO,TELEFONO,EMAIL,PUESTO_TRABAJO) 
			VALUES('Juan','Pacheco','83915648','juan50@gmail.com','Vendedor'),
				  ('Andres','Lopez','60228040','andre@gmail.com','Veterinaria');
	
	
INSERT INTO PRODUCTO(NOMBRE,PRECIO,CANTIDAD_DISPONIBLE,CATEGORIA)
			VALUES('Purina Cat Show',1300,94,'Alimento'),
				 ('Súper Perro',1400,58,'Alimento'),
				 ('Bola goma',1700,8,'Juguetes'),
				 ('Purina Pro Plan',2000,26,'Alimento'),
				 ('Peluche dinosaurio',1400,11,'Juguetes'),
				 ('NexGard',5400,30,'Medicamentos');

INSERT INTO MASCOTA(NOMBRE,ESPECIE,RAZA,FECHA_NACIMIENTO,ID_CLIENTE)
			VALUES('Brisa','Canina','Poodle','28/05/2022',1),
				  ('Luna','Canina','Beagle','12/04/2020',2),
				  ('Nala','Canina',NULL,'28/05/2017',3),
				  ('Milan','Canina',NULL,'24/08/2015',4),
				  ('Charlie','Ave',NULL,'25/08/2023',1);

INSERT INTO FACTURA_COMPRA(TOTAL,FECHA,ESTADO,PROVEEDOR)
			VALUES(122100,'15/08/2023','Cancelada','Purina'),
				  (30000,'11/09/2023','Cancelada','Super Perro'),
				  (25000,'04/08/2023','Cancelada','DogToy'),
				  (26000,'01/08/2023','Cancelada','Purina');

INSERT INTO DETALLE_FACTURA_COMPRA(ID_FACTURA_COMPRA,ID_PRODUCTO,CANTIDAD,PRECIO_COMPRA)
			VALUES(1,1,100,1100),
				  (2,2,25,1200),
				  (3,3,5,1500),
				  (1,1,11,1100);

INSERT INTO FACTURA_VENTA(ID_CLIENTE,ID_TRABAJADOR,TOTAL,FECHA,ESTADO,METODO_PAGO)
			VALUES(1,1,2400,'18/9/2023','Cancelada','Efectivo'),
				  (2,1,2800,'18/9/2023','Cancelada','Efectivo'),
				  (3,1,1700,'18/9/2023','Cancelada','Sinpe'),
				  (1,1,1100,'18/9/2023','Cancelada','Efectivo');

INSERT INTO DETALLE_FACTURA_VENTA(ID_FACTURA_VENTA,ID_PRODUCTO,CANTIDAD,PRECIO_VENTA)
			VALUES(1,1,1,1300),
				  (2,2,2,1400),
				  (3,3,1,1700),
				  (1,1,1,1100);




------------------- CONSULTAS -------------------
SELECT * FROM CLIENTE
SELECT * FROM TRABAJADOR
SELECT * FROM PRODUCTO
SELECT * FROM MASCOTA
SELECT * FROM FACTURA_COMPRA
SELECT * FROM DETALLE_FACTURA_COMPRA
SELECT * FROM FACTURA_VENTA
SELECT * FROM DETALLE_FACTURA_VENTA




-- procedimientos almacenados, scrud, CLIENTE, TRABAJADOR, FACTURAS, DETALLES
------------------- CLIENTES -------------------
-- Eliminar cliente
GO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_CLIENTE
    @ID_CLIENTE INT,
    @MENSAJE VARCHAR(50) OUTPUT
AS
BEGIN
    IF (NOT EXISTS (SELECT * FROM CLIENTE WHERE ID_CLIENTE = @ID_CLIENTE))
    BEGIN
        SET @MENSAJE = 'El cliente no existe';
        RETURN 0;
    END
    ELSE
    BEGIN
        DELETE FROM CLIENTE WHERE ID_CLIENTE = @ID_CLIENTE;
        SET @MENSAJE = 'Cliente eliminado';
        RETURN 1;
    END
END;
GO

-- Insertar cliente
CREATE OR ALTER PROCEDURE SP_INSERTAR_CLIENTE
	@ID_CLIENTE INT,
	@NOMBRE VARCHAR(80),
	@APELLIDO VARCHAR(80),
	@TELEFONO VARCHAR(11),
	@EMAIL  VARCHAR(45),
    @MENSAJE VARCHAR(50) OUTPUT
AS
BEGIN
    IF (EXISTS (SELECT * FROM CLIENTE WHERE ID_CLIENTE = @ID_CLIENTE))
    BEGIN
        SET @MENSAJE = 'El cliente ya existe';
        RETURN 0;
    END
    ELSE
    BEGIN
        INSERT INTO CLIENTE(NOMBRE,APELLIDO,TELEFONO,EMAIL)
        VALUES (@NOMBRE,@APELLIDO,@TELEFONO,@EMAIL);
        SET @MENSAJE = 'Cliente insertado correctamente';
        RETURN 1;
    END
END;
GO

-- Modificar cliente
CREATE OR ALTER PROCEDURE SP_MODIFICAR_CLIENTE
    @ID_CLIENTE INT,
	@NOMBRE VARCHAR(80),
	@APELLIDO VARCHAR(80),
	@TELEFONO VARCHAR(11),
	@EMAIL  VARCHAR(45),
    @MENSAJE VARCHAR(50) OUTPUT
AS
BEGIN
    IF (NOT EXISTS (SELECT * FROM CLIENTE WHERE ID_CLIENTE = @ID_CLIENTE))
    BEGIN
        SET @MENSAJE = 'El cliente no existe';
        RETURN 0;
    END
    ELSE
    BEGIN
        UPDATE CLIENTE
        SET  NOMBRE = @NOMBRE, APELLIDO=@APELLIDO,TELEFONO = @TELEFONO, EMAIL=@EMAIL
        WHERE ID_CLIENTE = @ID_CLIENTE;
        SET @MENSAJE = 'Cliente modificado correctamente';
        RETURN 1;
    END
END;
GO

-- Mostrar clientes
CREATE OR ALTER PROCEDURE SP_MOSTRAR_CLIENTE
AS
BEGIN
    SELECT * FROM CLIENTE
END;
GO


------------------- TRABAJADORES -------------------
-- 
-- Eliminar Trabajador
GO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_TRABAJADOR
    @ID_TRABAJADOR INT,
    @MENSAJE VARCHAR(50) OUTPUT
AS
BEGIN
    IF (NOT EXISTS (SELECT * FROM TRABAJADOR WHERE ID_TRABAJADOR = @ID_TRABAJADOR))
    BEGIN
        SET @MENSAJE = 'El trabajador se encuentra registrado';
        RETURN 0;
    END
    ELSE
    BEGIN
        DELETE FROM TRABAJADOR WHERE ID_TRABAJADOR = @ID_TRABAJADOR;
        SET @MENSAJE = 'Trabajador eliminado correctamente';
        RETURN 1;
    END
END;
GO

-- Insertar trabajador
CREATE OR ALTER PROCEDURE SP_INSERTAR_TRABAJADOR
    @ID_TRABAJADOR INT,
	@NOMBRE VARCHAR(80),
	@APELLIDO VARCHAR(80),
	@TELEFONO VARCHAR(11),
	@EMAIL  VARCHAR(45),
	@PUESTO_TRABAJO VARCHAR(35),
    @MENSAJE VARCHAR(50) OUTPUT
AS
BEGIN
    IF (EXISTS (SELECT * FROM TRABAJADOR WHERE ID_TRABAJADOR =  @ID_TRABAJADOR))
    BEGIN
        SET @MENSAJE = 'El trabajador ya existe';
        RETURN 0;
    END
    ELSE
    BEGIN
        INSERT INTO TRABAJADOR(NOMBRE,APELLIDO,TELEFONO,EMAIL,PUESTO_TRABAJO)
        VALUES (@NOMBRE,@APELLIDO,@TELEFONO,@EMAIL,@PUESTO_TRABAJO);
        SET @MENSAJE = 'Trabajador insertado correctamente';
        RETURN 1;
    END
END;
GO
-- Modificar  trabajador
CREATE OR ALTER PROCEDURE SP_MODIFICAR_CLIENTE
    @ID_TRABAJADOR INT,
	@NOMBRE VARCHAR(80),
	@APELLIDO VARCHAR(80),
	@TELEFONO VARCHAR(11),
	@EMAIL  VARCHAR(45),
	@PUESTO_TRABAJO VARCHAR(35),
    @MENSAJE VARCHAR(50) OUTPUT
AS
BEGIN
    IF (NOT EXISTS (SELECT * FROM TRABAJADOR WHERE ID_TRABAJADOR  = @ID_TRABAJADOR ))
    BEGIN
        SET @MENSAJE = 'El trabajador no existe';
        RETURN 0;
    END
    ELSE
    BEGIN
        UPDATE TRABAJADOR 
        SET  NOMBRE = @NOMBRE, APELLIDO=@APELLIDO,TELEFONO = @TELEFONO, EMAIL=@EMAIL,PUESTO_TRABAJO =@PUESTO_TRABAJO
        WHERE ID_TRABAJADOR = @ID_TRABAJADOR ;
        SET @MENSAJE = 'Trabajador modificado correctamente';
        RETURN 1;
    END
END;
GO

-- Mostrar trabajador
CREATE OR ALTER PROCEDURE SP_MOSTRAR_TRABAJADOR
AS
BEGIN
    SELECT * FROM TRABAJADOR
END;
GO
------------------- PRODUCTOS -------------------

-- Eliminar Producto
CREATE OR ALTER PROCEDURE SP_ELIMINAR_PRODUCTO
    @ID_PRODUCTO INT,
    @MENSAJE VARCHAR(50) OUTPUT
AS
BEGIN
    IF (NOT EXISTS (SELECT * FROM PRODUCTO WHERE ID_PRODUCTO = @ID_PRODUCTO))
    BEGIN
        SET @MENSAJE = 'El producto no existe';
        RETURN 0;
    END
    ELSE
    BEGIN
        DELETE FROM PRODUCTO WHERE ID_PRODUCTO = @ID_PRODUCTO;
        SET @MENSAJE = 'Producto eliminado correctamente';
        RETURN 1;
    END
END;
GO

-- Insertar producto
CREATE OR ALTER PROCEDURE SP_INSERTAR_PRODUCTO
    @NOMBRE VARCHAR(100),
    @PRECIO DECIMAL(10, 2),
	@CANTIDAD_DISPONIBLE INT,
    @CATEGORIA VARCHAR(25),
    @MENSAJE VARCHAR(50) OUTPUT
AS
BEGIN
    IF (EXISTS (SELECT * FROM PRODUCTO WHERE NOMBRE = @NOMBRE))
    BEGIN
        SET @MENSAJE = 'El producto ya existe';
        RETURN 0;
    END
    ELSE
    BEGIN
        INSERT INTO PRODUCTO(NOMBRE,PRECIO,CANTIDAD_DISPONIBLE,CATEGORIA)
        VALUES (@NOMBRE,@PRECIO,@CANTIDAD_DISPONIBLE,@CATEGORIA);
        SET @MENSAJE = 'Producto insertado correctamente';
        RETURN 1;
    END
END;
GO

-- Modificar Producto
CREATE OR ALTER PROCEDURE SP_MODIFICAR_PRODUCTO
    @ID_PRODUCTO INT,
    @NOMBRE VARCHAR(100),
    @PRECIO DECIMAL(10, 2),
	@CANTIDAD_DISPONIBLE INT,
    @CATEGORIA VARCHAR(25),
    @MENSAJE VARCHAR(50) OUTPUT
AS
BEGIN
    IF (NOT EXISTS (SELECT * FROM PRODUCTO WHERE ID_PRODUCTO = @ID_PRODUCTO))
    BEGIN
        SET @MENSAJE = 'El producto no existe';
        RETURN 0;
    END
    ELSE
    BEGIN
        UPDATE PRODUCTO
        SET NOMBRE = @NOMBRE,PRECIO=@PRECIO,CANTIDAD_DISPONIBLE =@CANTIDAD_DISPONIBLE,CATEGORIA=@CATEGORIA
        WHERE ID_PRODUCTO = @ID_PRODUCTO;
        SET @MENSAJE = 'Producto modificado correctamente';
        RETURN 1;
    END
END;
GO
-- Mostrar producto
CREATE OR ALTER PROCEDURE SP_MOSTRAR_PRODUCTO
AS
BEGIN
    SELECT * FROM PRODUCTO
END;
GO
------------------- FACTURA_VENTA -------------------

-- Eliminar factura venta
CREATE OR ALTER PROCEDURE SP_ELIMINAR_FACTURA_VENTA
    @ID_FACTURA_VENTA INT,
    @MENSAJE VARCHAR(50) OUTPUT
AS
BEGIN
    IF (NOT EXISTS (SELECT * FROM FACTURA_VENTA WHERE ID_FACTURA_VENTA = @ID_FACTURA_VENTA))
    BEGIN
        SET @MENSAJE = 'La factura venta no existe';
        RETURN 0;
    END
    ELSE
    BEGIN
        DELETE FROM FACTURA_VENTA WHERE ID_FACTURA_VENTA = @ID_FACTURA_VENTA;
        SET @MENSAJE = 'Factura venta eliminada correctamente';
        RETURN 1;
    END
END;
GO

-- Insertar factura venta
CREATE OR ALTER PROCEDURE SP_INSERTAR_FACTURA_VENTA
    @ID_CLIENTE INT,
    @ID_TRABAJADOR INT,
    @TOTAL DECIMAL(10, 2),
    @FECHA DATE,
    @ESTADO VARCHAR(10),
	@METODO_PAGO VARCHAR(10),
    @MENSAJE VARCHAR(50) OUTPUT
AS
BEGIN
    INSERT INTO FACTURA_VENTA(ID_CLIENTE,ID_TRABAJADOR,TOTAL,FECHA,ESTADO,METODO_PAGO)
    VALUES (@ID_CLIENTE,@ID_TRABAJADOR,@TOTAL,@FECHA,@ESTADO,@METODO_PAGO);
    SET @MENSAJE = 'Factura venta insertada correctamente';
    RETURN 1;
END;
GO

-- Modificar factura venta
CREATE OR ALTER PROCEDURE SP_MODIFICAR_FACTURA_VENTA
    @ID_FACTURA_VENTA INT,
    @ID_CLIENTE INT,
    @ID_TRABAJADOR INT,
    @TOTAL DECIMAL(10, 2),
    @FECHA DATE,
    @ESTADO VARCHAR(10),
	@METODO_PAGO VARCHAR(10),
    @MENSAJE VARCHAR(50) OUTPUT
AS
BEGIN
    IF (NOT EXISTS (SELECT * FROM FACTURA_VENTA WHERE ID_FACTURA_VENTA = @ID_FACTURA_VENTA))
    BEGIN
        SET @MENSAJE = 'La venta no existe';
        RETURN 0;
    END
    ELSE
    BEGIN
        UPDATE FACTURA_VENTA
        SET ID_CLIENTE=@ID_CLIENTE,ID_TRABAJADOR=@ID_TRABAJADOR,TOTAL=@TOTAL,FECHA=@FECHA,ESTADO=@ESTADO,METODO_PAGO=@METODO_PAGO
        WHERE ID_FACTURA_VENTA = @ID_FACTURA_VENTA;
        SET @MENSAJE = 'Factura venta modificada correctamente';
        RETURN 1;
    END
END;
GO
-- Mostrar Ventas
CREATE OR ALTER PROCEDURE SP_MOSTRAR_FACTURA_VENTA
AS
BEGIN
    SELECT * FROM FACTURA_VENTA
END;
GO

------------------- FACTURA_COMPRA -------------------

-- Eliminar factura compra
CREATE OR ALTER PROCEDURE SP_ELIMINAR_FACTURA_COMPRA
    @ID_FACTURA_COMPRA INT,
    @MENSAJE VARCHAR(50) OUTPUT
AS
BEGIN
    IF (NOT EXISTS (SELECT * FROM FACTURA_COMPRA WHERE ID_FACTURA_COMPRA = @ID_FACTURA_COMPRA))
    BEGIN
        SET @MENSAJE = 'La factura compra no existe';
        RETURN 0;
    END
    ELSE
    BEGIN
        DELETE FROM FACTURA_COMPRA WHERE ID_FACTURA_COMPRA = @ID_FACTURA_COMPRA;
        SET @MENSAJE = 'Factura compra eliminada correctamente';
        RETURN 1;
    END
END;
GO

-- Insertar factura compra
CREATE OR ALTER PROCEDURE SP_INSERTAR_FACTURA_COMPRA
    @TOTAL DECIMAL(10, 2),
    @FECHA DATE ,
    @ESTADO VARCHAR(10),
    @PROVEEDOR VARCHAR(65),
    @MENSAJE VARCHAR(50) OUTPUT
AS
BEGIN
    INSERT INTO FACTURA_COMPRA(TOTAL,FECHA,ESTADO,PROVEEDOR)
    VALUES (@TOTAL,@FECHA,@ESTADO,@PROVEEDOR);
    SET @MENSAJE = 'Factura compra insertada correctamente';
    RETURN 1;
END;
GO

-- Modificar factura compra
CREATE OR ALTER PROCEDURE SP_MODIFICAR_FACTURA_COMPRA
    @ID_FACTURA_COMPRA INT,
    @TOTAL DECIMAL(10, 2),
    @FECHA DATE ,
    @ESTADO VARCHAR(10),
    @PROVEEDOR VARCHAR(65),
    @MENSAJE VARCHAR(50) OUTPUT
AS
BEGIN
    IF (NOT EXISTS (SELECT * FROM FACTURA_COMPRA WHERE ID_FACTURA_COMPRA = @ID_FACTURA_COMPRA))
    BEGIN
        SET @MENSAJE = 'La factura compra no existe';
        RETURN 0;
    END
    ELSE
    BEGIN
        UPDATE FACTURA_COMPRA
        SET TOTAL=@TOTAL,FECHA=@FECHA,ESTADO=@ESTADO,PROVEEDOR=@PROVEEDOR
        WHERE ID_FACTURA_COMPRA = @ID_FACTURA_COMPRA;
        SET @MENSAJE = 'Factura compra modificada correctamente';
        RETURN 1;
    END
END;
GO
-- Mostrar factura compra
CREATE OR ALTER PROCEDURE SP_MOSTRAR_FACTURA_COMPRA
AS
BEGIN
    SELECT * FROM FACTURA_COMPRA
END;
GO

------------------- DETALLE_VENTA -------------------

-- Eliminar detalle factura de Venta
CREATE OR ALTER PROCEDURE SP_ELIMINAR_DETALLE_FACTURA_VENTA
    @ID_DETALLE_VENTA INT,
    @MENSAJE VARCHAR(50) OUTPUT
AS
BEGIN
    IF (NOT EXISTS (SELECT * FROM DETALLE_FACTURA_VENTA WHERE ID_DETALLE_VENTA = @ID_DETALLE_VENTA))
    BEGIN
        SET @MENSAJE = 'El detalle factura de venta no existe';
        RETURN 0;
    END
    ELSE
    BEGIN
        DELETE FROM DETALLE_FACTURA_VENTA WHERE ID_DETALLE_VENTA = @ID_DETALLE_VENTA;
        SET @MENSAJE = 'Detalle factura de venta eliminado';
        RETURN 1;
    END
END;
GO
-- Insertar detalle factura de Venta
CREATE OR ALTER PROCEDURE SP_INSERTAR_DETALLE_FACTURA_VENTA
    @ID_FACTURA_VENTA INT,
    @ID_PRODUCTO INT,
    @CANTIDAD INT,
    @PRECIO_VENTA DECIMAL(10, 2),
    @MENSAJE VARCHAR(50) OUTPUT
AS
BEGIN
    INSERT INTO DETALLE_FACTURA_VENTA(ID_FACTURA_VENTA,ID_PRODUCTO,CANTIDAD,PRECIO_VENTA)
    VALUES (@ID_FACTURA_VENTA,@ID_PRODUCTO,@CANTIDAD,@PRECIO_VENTA);
    SET @MENSAJE = 'Detalle factura de venta insertado correctamente';
    RETURN 1;
END;
GO

-- Modificar detalle factura de venta
CREATE OR ALTER PROCEDURE SP_MODIFICAR_DETALLE_VENTA
	@ID_FACTURA_VENTA INT,
    @ID_DETALLE_VENTA INT,
    @ID_PRODUCTO INT,
    @CANTIDAD INT,
    @PRECIO_VENTA DECIMAL(10, 2),
    @MENSAJE VARCHAR(50) OUTPUT
AS
BEGIN
    IF (NOT EXISTS (SELECT * FROM DETALLE_FACTURA_VENTA WHERE ID_DETALLE_VENTA = @ID_DETALLE_VENTA))
    BEGIN
        SET @MENSAJE = 'El detalle factura de venta no existe';
        RETURN 0;
    END
    ELSE
    BEGIN
        UPDATE DETALLE_FACTURA_VENTA
        SET @ID_FACTURA_VENTA = @ID_FACTURA_VENTA, ID_PRODUCTO = @ID_PRODUCTO, CANTIDAD = @CANTIDAD, PRECIO_VENTA = @PRECIO_VENTA
        WHERE ID_DETALLE_VENTA = @ID_DETALLE_VENTA;
        SET @MENSAJE = 'Detalle factura de venta modificado correctamente';
        RETURN 1;
    END
END;
GO
-- Mostrar detalle factura de venta
CREATE OR ALTER PROCEDURE SP_MOSTRAR_DETALLE_VENTA
AS
BEGIN
    SELECT * FROM DETALLE_FACTURA_VENTA
END;
GO
------------------- DETALLE_COMPRA -------------------

-- Eliminar detalle factura de compra
CREATE OR ALTER PROCEDURE SP_ELIMINAR_DETALLE_FACTURA_COMPRA
    @ID_DETALLE_COMPRA INT,
    @MENSAJE VARCHAR(50) OUTPUT
AS
BEGIN
    IF (NOT EXISTS (SELECT * FROM DETALLE_FACTURA_COMPRA WHERE ID_DETALLE_COMPRA = @ID_DETALLE_COMPRA))
    BEGIN
        SET @MENSAJE = 'El detalle factura de compra no existe';
        RETURN 0;
    END
    ELSE
    BEGIN
        DELETE FROM DETALLE_FACTURA_COMPRA WHERE ID_DETALLE_COMPRA = @ID_DETALLE_COMPRA;
        SET @MENSAJE = 'Detalle factura de compra eliminado correctamente';
        RETURN 1;
    END
END;
GO
-- Insertar detalle factura de compra
CREATE OR ALTER PROCEDURE SP_INSERTAR_DETALLE_FACTURA_COMPRA
    @ID_FACTURA_COMPRA INT,
    @ID_PRODUCTO INT,
    @CANTIDAD INT,
    @PRECIO_COMPRA DECIMAL(10, 2),
    @MENSAJE VARCHAR(50) OUTPUT
AS
BEGIN
    INSERT INTO DETALLE_FACTURA_COMPRA(ID_FACTURA_COMPRA,ID_PRODUCTO,CANTIDAD,PRECIO_COMPRA)
    VALUES (@ID_FACTURA_COMPRA,@ID_PRODUCTO,@CANTIDAD,@PRECIO_COMPRA);
    SET @MENSAJE = 'Detalle factura de compra insertado correctamente';
    RETURN 1;
END;
GO

-- Modificar detalle factura de compra
CREATE OR ALTER PROCEDURE SP_MODIFICAR_DETALLE_FACTURA_COMPRA
	@ID_FACTURA_COMPRA INT,
    @ID_DETALLE_COMPRA INT,
    @ID_PRODUCTO INT,
    @CANTIDAD INT,
    @PRECIO_COMPRA DECIMAL(10, 2),
    @MENSAJE VARCHAR(50) OUTPUT
AS
BEGIN
    IF (NOT EXISTS (SELECT * FROM DETALLE_FACTURA_COMPRA WHERE ID_DETALLE_COMPRA = @ID_DETALLE_COMPRA))
    BEGIN
        SET @MENSAJE = 'El detalle factura de compra no existe';
        RETURN 0;
    END
    ELSE
    BEGIN
        UPDATE DETALLE_FACTURA_COMPRA
        SET ID_FACTURA_COMPRA = @ID_FACTURA_COMPRA, ID_PRODUCTO = @ID_PRODUCTO, CANTIDAD = @CANTIDAD, PRECIO_COMPRA = @PRECIO_COMPRA
        WHERE ID_DETALLE_COMPRA = @ID_DETALLE_COMPRA;
        SET @MENSAJE = 'Detalle factura de compra modificado correctamente';
        RETURN 1;
    END
END;
GO
-- Mostrar detalle factura de Compra
CREATE OR ALTER PROCEDURE SP_MOSTRAR_DETALLE_COMPRA
AS
BEGIN
    SELECT * FROM DETALLE_FACTURA_COMPRA
END;
GO

------------------- INNER JOINS -------------------

--inner join de las tabla mascota y cliente, para saber el nombre del dueño de la mascota
SELECT CLIENTE.NOMBRE AS NOMBRE_CLIENTE, MASCOTA.NOMBRE AS NOMBRE_MASCOTA
FROM CLIENTE
INNER JOIN MASCOTA ON CLIENTE.ID_CLIENTE = MASCOTA.ID_CLIENTE;


------------------- TRIGGERS -------------------
-- despues de cada venta la cantidad de productos se disminuye
GO
CREATE OR ALTER TRIGGER TR_ACTUALIZAR_CANTIDAD_VENTA
ON DETALLE_FACTURA_VENTA
AFTER INSERT
AS
BEGIN
    
    DECLARE @ID_PRODUCTO INT, @CANTIDAD INT;
    SELECT @ID_PRODUCTO = ID_PRODUCTO, @CANTIDAD = CANTIDAD
    FROM inserted;

    -- Se hace una actualizacion de la cantidad disponible de productos
    UPDATE PRODUCTO
    SET CANTIDAD_DISPONIBLE = CANTIDAD_DISPONIBLE - @CANTIDAD
    WHERE ID_PRODUCTO = @ID_PRODUCTO;
END;
GO

-- despues de cada compra la cantidad de productos aumenta
GO
CREATE OR ALTER TRIGGER TR_ACTUALIZAR_CANTIDAD_COMPRA
ON DETALLE_FACTURA_COMPRA
AFTER INSERT
AS
BEGIN
    
    DECLARE @ID_PRODUCTO INT, @CANTIDAD INT;
    SELECT @ID_PRODUCTO = ID_PRODUCTO, @CANTIDAD = CANTIDAD
    FROM inserted;

    -- Se hace una actualizacion de la cantidad disponible de productos
    UPDATE PRODUCTO
    SET CANTIDAD_DISPONIBLE = CANTIDAD_DISPONIBLE + @CANTIDAD
    WHERE ID_PRODUCTO = @ID_PRODUCTO;
END;
GO

--  Calculará automáticamente el total de la factura de compra correspondiente en la tabla FACTURA_COMPRA segun nuevos registros insertados o actualizados en DETALLE_FACTURA_COMPRA. 
CREATE OR ALTER TRIGGER TR_CALCULAR_TOTAL_COMPRA
ON DETALLE_FACTURA_COMPRA
AFTER INSERT, UPDATE
AS
BEGIN
    UPDATE FC
    SET FC.TOTAL = (
        SELECT SUM(DFC.CANTIDAD * DFC.PRECIO_COMPRA)
        FROM INSERTED DFC
        WHERE DFC.ID_FACTURA_COMPRA = FC.ID_FACTURA_COMPRA
    )
    FROM FACTURA_COMPRA FC
    INNER JOIN INSERTED I ON FC.ID_FACTURA_COMPRA = I.ID_FACTURA_COMPRA;
END;
GO

-- Calcular el total para FACTURA_venta
CREATE OR ALTER TRIGGER TR_CALCULAR_TOTAL_VENTA
ON DETALLE_FACTURA_VENTA
AFTER INSERT, UPDATE
AS
BEGIN
    UPDATE FV
    SET FV.TOTAL = (
        SELECT SUM(DFV.CANTIDAD * DFV.PRECIO_VENTA)
        FROM INSERTED DFV
        WHERE DFV.ID_FACTURA_VENTA = FV.ID_FACTURA_VENTA
    )
    FROM FACTURA_VENTA FV
    INNER JOIN INSERTED I ON FV.ID_FACTURA_VENTA = I.ID_FACTURA_VENTA;
END;
GO